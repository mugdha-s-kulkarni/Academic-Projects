/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PlowTruckRole;

import Business.Employee.User;
import Business.Enterprise.Enterprise;
import Business.Organization.PlowTruckOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ReportCleaningWorkRequest;
import Business.WorkQueue.WorkRequest;
import com.sun.xml.internal.org.jvnet.mimepull.MIMEMessage;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author Mugdha
 */
public class PlowTruckWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PlowTruckWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private PlowTruckOrganization organization;
    private Enterprise enterprise;

    public PlowTruckWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, PlowTruckOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organization = organization;
        this.enterprise = enterprise;

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequest.getModel();

        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = ((ReportCleaningWorkRequest) request).getStreet();
            row[2] = ((ReportCleaningWorkRequest) request).getSensor();
            row[3] = ((ReportCleaningWorkRequest) request).getSnowHeight();
            row[4] = request.getStatus();

            if (request.getSender().getEmployee() instanceof User) {
                User user = (User) request.getSender().getEmployee();
                row[5] = user.getEmailId();
            } else {
                row[5] = "---";
            }

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequest = new javax.swing.JTable();
        btnComplete = new javax.swing.JButton();

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));
        jDesktopPane1.setEnabled(false);

        tblRequest.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meaasage", "Street Name", "Sensor Area", "Snow Height", "Result", "Sender- email id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequest);
        if (tblRequest.getColumnModel().getColumnCount() > 0) {
            tblRequest.getColumnModel().getColumn(5).setResizable(false);
        }

        btnComplete.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnComplete.setText("Complete!");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(btnComplete, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(btnComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(375, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addGap(99, 99, 99))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblRequest.getSelectedRow();
        WorkRequest req;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            req = (WorkRequest) tblRequest.getValueAt(selectedRow, 0);
        }

         
        // Send an email
        if (req.getSender().getEmployee() instanceof User) {           
                                
            User user = (User) req.getSender().getEmployee();
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.socketFactory.port", "465");
            props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.port", "465");

            Session session = Session.getDefaultInstance(props,
                    new javax.mail.Authenticator() {
                     protected PasswordAuthentication getPasswordAuthentication() {
                      return new PasswordAuthentication("snowplowcleaning@gmail.com", "westlandave");
                    }
                   }
                 );
            
            try {
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress("snowplowcleaning@gmail.com"));
                
                String emailId = user.getEmailId();               
                
                message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailId));
                message.setSubject("Snow Plowing Request");
                message.setText("Your requested snow plowing for street: "+((ReportCleaningWorkRequest)req).getStreet()
                        +" and area: "+((ReportCleaningWorkRequest)req).getSensor() +" has been Resolved. \n -Thanks and regards \n SnowPlowing & Cleaning Department!");
                
                Transport.send(message);
                 JOptionPane.showMessageDialog(null, "Your email has been sent successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
                
            }

        }
        ((ReportCleaningWorkRequest) req).setStatus("Completed");
        userAccount.getEmployee().setStatus("Free");

        populateTable();
    }//GEN-LAST:event_btnCompleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComplete;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRequest;
    // End of variables declaration//GEN-END:variables
}
