/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CleaningRole;

import Business.Enterprise.Enterprise;
import Business.Organization.CleaningOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ReportCleaningWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mugdha
 */
public class CleaningWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CleaningWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private CleaningOrganization organization;
    private Enterprise enterprise;
    
    public CleaningWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, CleaningOrganization organization, Enterprise enterprise) {
        initComponents();
        
        this.userProcessContainer= userProcessContainer;
        this.userAccount =account;
        this.organization = organization;
        this.enterprise = enterprise;
        
        populateTable();
    }
    
     public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)tblReporting.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            
            Object[] row = new Object[7];          
          
            row[0] = request;
            row[1] = ((ReportCleaningWorkRequest) request).getSensor();
           
            row[2] =((ReportCleaningWorkRequest) request).getSnowHeight();
            row[3] =((ReportCleaningWorkRequest) request).getDate();
            
            String status = ((ReportCleaningWorkRequest) request).getStatus();
            row[4] = status == null ? "Waiting" : status;
            
            String m = request.getMessage();
            row[5] = m;
            
            UserAccount u = request.getReceiver();
            row[6] = u==null?"Not assigned" : u + "-"+ u.getEmployee().getName();
            model.addRow(row);            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        btnProcess = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblReporting = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));
        jDesktopPane1.setEnabled(false);

        btnProcess.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnProcess.setText("Process ");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        tblReporting.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tblReporting.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Street", "Sensor Area", "Snow Height", "Sensed Time", "Status", "Message", "Assigned PT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblReporting);

        jDesktopPane1.setLayer(btnProcess, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(289, Short.MAX_VALUE)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(227, 227, 227))))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(297, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(517, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        try {
           int selectedRow = tblReporting.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        ReportCleaningWorkRequest request = (ReportCleaningWorkRequest)tblReporting.getValueAt(selectedRow, 0);
        
        try {
            if(request.getStatus().equalsIgnoreCase("Processing") ){
            JOptionPane.showMessageDialog(null, "This request is being processed right now!", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        else if(request.getStatus().equalsIgnoreCase("Completed")){
           JOptionPane.showMessageDialog(null, "This request has already been completed!", "Information", JOptionPane.INFORMATION_MESSAGE);
  
        }
        else{
              
        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request,organization,enterprise);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        populateTable();
        } 
        } catch (Exception e) {
        }
         
        } catch (Exception e) {
        }
       

    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblReporting;
    // End of variables declaration//GEN-END:variables
}
